# WCINYP - Weill Cornell Imaging at NewYork-Presbyterian

## Product Requirements Document

### Overview
WCINYP is a modern web application for medical imaging administration, built with Next.js 14, TypeScript, and Tailwind CSS. The application serves as a comprehensive platform for document management, provider directories, form generation, and contact management.

### Key Features

1. **Document Management System**
   - Browse and search 156+ medical forms and documents
   - Category-based organization (ABN, Invoices, Fax Forms, etc.)
   - Quick download functionality
   - Search with real-time filtering

2. **Provider Directory**
   - Enhanced provider profiles with NPI numbers
   - Affiliation badges (WCM, NYP, Private, etc.)
   - Provider flags (VIP, urgent, new, teaching, research)
   - Expandable notes and contact information
   - Availability indicators

3. **Form Generation**
   - Dynamic form builder for self-pay automation
   - Pre-built templates for common scenarios
   - Field validation and error handling
   - Form submission tracking

4. **Contact Directory**
   - Comprehensive database of all stakeholders
   - Department-based organization
   - Export functionality
   - Advanced search capabilities

5. **Knowledge Base**
   - Fumadocs-powered documentation
   - Full sidebar navigation
   - Isolated styling system
   - MDX content support

### Technical Requirements

- Static site generation for Netlify deployment
- Client-side rendering only (no server components)
- Dark mode support throughout
- Mobile responsive design
- Accessibility compliance (WCAG 2.1 AA)
- Test-driven development approach

### Development Phases

#### Phase 1: UI/UX Enhancements (COMPLETED)
- Navbar with WCI@NYP branding
- Global search functionality
- Documents & Forms integration
- Provider directory redesign
- Dark mode implementation
- Rich footer

#### Phase 2: Backend Infrastructure (CURRENT)
- Authentication system with CWID integration
- Netlify Functions for form submissions
- Database integration (PostgreSQL/Supabase)
- API development for data persistence

#### Phase 3: Enhanced User Experience
- Real-time provider availability
- Knowledge sharing features
- Advanced search and filtering
- Performance optimizations

#### Phase 4: Healthcare Integration
- Epic EMR integration
- Workflow automation
- HIPAA compliance
- Security enhancements

#### Phase 5: Analytics & Intelligence
- Usage analytics dashboard
- Machine learning features
- Business intelligence tools
- Custom report generation

### Current Development Tasks

1. Complete Claude Task Master setup for persistent task management
2. Design Netlify Functions architecture
3. Plan authentication flow with CWID
4. Research database options
5. Create API specification document
6. Implement first Netlify Function for form submissions

### Quality Standards

- Minimum 80% test coverage
- All components must pass accessibility audits
- Code must pass TypeScript strict mode
- Follow established UI patterns (shadcn/ui)
- Comprehensive documentation required