{
  "master": {
    "tasks": [
      {
        "id": 15,
        "title": "Remove Duplicate DataTable Implementation",
        "description": "Remove the duplicate DataTable in /src/components/shared/data-table.tsx and standardize on the ui/data-table.tsx implementation with automated migration",
        "status": "pending",
        "priority": "high",
        "dependencies": [14],
        "phase": "4",
        "week": "4",
        "files": [
          "src/components/shared/data-table.tsx",
          "src/components/ui/data-table.tsx",
          "scripts/migrate-datatable-imports.js"
        ],
        "commands": [
          "node scripts/migrate-datatable-imports.js",
          "npm run lint:fix",
          "npm test -- data-table"
        ],
        "implementation": {
          "migrate-datatable-imports.js": "const fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\n\n// Script to automatically update all DataTable imports\nconst files = glob.sync('src/**/*.{ts,tsx}', {\n  ignore: ['**/node_modules/**', 'src/components/ui/data-table.tsx']\n});\n\nlet updatedCount = 0;\n\nfiles.forEach(file => {\n  let content = fs.readFileSync(file, 'utf8');\n  const originalContent = content;\n  \n  // Replace imports\n  content = content.replace(\n    /from ['\"]\\.\\.\\/shared\\/data-table['\"]|from ['\"]@\\/components\\/shared\\/data-table['\"]/g,\n    'from \"@/components/ui/data-table\"'\n  );\n  \n  // Update any shared-specific props to ui-compatible ones\n  content = content.replace(/DataTableShared/g, 'DataTable');\n  \n  if (content !== originalContent) {\n    fs.writeFileSync(file, content);\n    console.log(`‚úÖ Updated imports in: ${file}`);\n    updatedCount++;\n  }\n});\n\nconsole.log(`\\nüéâ Migration complete! Updated ${updatedCount} files.`);\n\n// Verify no remaining references\nconst verifyFiles = glob.sync('src/**/*.{ts,tsx}');\nlet remainingRefs = 0;\n\nverifyFiles.forEach(file => {\n  const content = fs.readFileSync(file, 'utf8');\n  if (content.includes('shared/data-table')) {\n    console.error(`‚ùå Remaining reference in: ${file}`);\n    remainingRefs++;\n  }\n});\n\nif (remainingRefs === 0) {\n  console.log('‚úÖ No remaining references to shared/data-table');\n  console.log('\\nüóëÔ∏è  You can now safely delete: src/components/shared/data-table.tsx');\n} else {\n  console.error(`\\n‚ö†Ô∏è  Found ${remainingRefs} remaining references. Please update manually.`);\n  process.exit(1);\n}",
          "comparison.md": "# DataTable Implementation Comparison\n\n## Before (shared/data-table.tsx)\n```typescript\n// Duplicate implementation with custom props\nexport function DataTableShared<T>({\n  data,\n  columns,\n  onRowClick,\n  customStyles,\n}: DataTableSharedProps<T>) {\n  // Custom implementation\n}\n```\n\n## After (ui/data-table.tsx)\n```typescript\n// Standardized shadcn/ui implementation\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  onRowClick,\n  className,\n}: DataTableProps<TData, TValue>) {\n  // shadcn/ui standard implementation\n}\n```\n\n## Migration Notes\n- `customStyles` prop ‚Üí use `className` with Tailwind utilities\n- `DataTableShared` ‚Üí rename to `DataTable`\n- Import path: `@/components/shared/data-table` ‚Üí `@/components/ui/data-table`"
        },
        "validation": {
          "commands": [
            "grep -r 'shared/data-table' src/ || echo 'No references found ‚úÖ'",
            "npm run type-check",
            "npm test -- --run"
          ],
          "expectedOutput": "No references to shared/data-table, all tests pass"
        },
        "acceptance": {
          "criteria": [
            "Duplicate DataTable removed from shared folder",
            "All imports updated to use ui/data-table",
            "No functionality lost (verified by tests)",
            "Tests still pass",
            "Migration script created for future use",
            "Type checking passes",
            "No remaining references to shared implementation"
          ]
        }
      },
      {
        "id": 16,
        "title": "Create Shared Table Utilities",
        "description": "Extract common table patterns (column definitions, search inputs, action buttons) into reusable utilities with TypeScript support",
        "status": "in_progress",
        "priority": "high",
        "dependencies": [15],
        "phase": "4",
        "week": "4",
        "files": [
          "src/lib/table-utilities.ts",
          "src/components/ui/table-columns.tsx",
          "src/components/ui/table-filters.tsx",
          "src/components/ui/table-actions.tsx"
        ],
        "implementation": {
          "table-utilities.ts": "import { ColumnDef } from '@tanstack/react-table';\nimport { Button } from '@/components/ui/button';\nimport { ArrowUpDown, MoreHorizontal } from 'lucide-react';\nimport { Checkbox } from '@/components/ui/checkbox';\n\n// Generic column helpers\nexport function createSelectColumn<T>(): ColumnDef<T> {\n  return {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  };\n}\n\nexport function createSortableColumn<T>({\n  accessorKey,\n  header,\n  cell,\n}: {\n  accessorKey: keyof T;\n  header: string;\n  cell?: (value: any) => React.ReactNode;\n}): ColumnDef<T> {\n  return {\n    accessorKey: accessorKey as string,\n    header: ({ column }) => (\n      <Button\n        variant=\"ghost\"\n        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n      >\n        {header}\n        <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n      </Button>\n    ),\n    cell: cell ? ({ row }) => cell(row.getValue(accessorKey as string)) : undefined,\n  };\n}\n\nexport function createActionColumn<T>({\n  actions,\n}: {\n  actions: Array<{\n    label: string;\n    onClick: (row: T) => void;\n    icon?: React.ComponentType<{ className?: string }>;\n  }>;\n}): ColumnDef<T> {\n  return {\n    id: 'actions',\n    enableHiding: false,\n    cell: ({ row }) => {\n      const data = row.original;\n      \n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {actions.map((action, index) => (\n              <DropdownMenuItem\n                key={index}\n                onClick={() => action.onClick(data)}\n              >\n                {action.icon && <action.icon className=\"mr-2 h-4 w-4\" />}\n                {action.label}\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  };\n}\n\n// Common formatters\nexport const formatters = {\n  date: (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  },\n  \n  currency: (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  },\n  \n  percentage: (value: number) => {\n    return `${(value * 100).toFixed(1)}%`;\n  },\n  \n  boolean: (value: boolean) => {\n    return value ? '‚úì' : '‚úó';\n  },\n};",
          "table-filters.tsx": "'use client';\n\nimport { Table } from '@tanstack/react-table';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { X } from 'lucide-react';\n\ninterface DataTableSearchProps<TData> {\n  table: Table<TData>;\n  searchKey: string;\n  placeholder?: string;\n}\n\nexport function DataTableSearch<TData>({\n  table,\n  searchKey,\n  placeholder = 'Search...',\n}: DataTableSearchProps<TData>) {\n  const value = (table.getColumn(searchKey)?.getFilterValue() as string) ?? '';\n  \n  return (\n    <div className=\"relative\">\n      <Input\n        placeholder={placeholder}\n        value={value}\n        onChange={(event) =>\n          table.getColumn(searchKey)?.setFilterValue(event.target.value)\n        }\n        className=\"max-w-sm pr-10\"\n      />\n      {value && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute right-0 top-0 h-full px-3\"\n          onClick={() => table.getColumn(searchKey)?.setFilterValue('')}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n\ninterface DataTableFiltersProps<TData> {\n  table: Table<TData>;\n  filters: Array<{\n    key: string;\n    label: string;\n    options: Array<{ label: string; value: string }>;\n  }>;\n}\n\nexport function DataTableFilters<TData>({\n  table,\n  filters,\n}: DataTableFiltersProps<TData>) {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {filters.map((filter) => {\n        const column = table.getColumn(filter.key);\n        const value = column?.getFilterValue() as string;\n        \n        return (\n          <Select\n            key={filter.key}\n            value={value || ''}\n            onValueChange={(value) => column?.setFilterValue(value || undefined)}\n          >\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder={filter.label} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All {filter.label}</SelectItem>\n              {filter.options.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      })}\n      \n      {table.getState().columnFilters.length > 0 && (\n        <Button\n          variant=\"ghost\"\n          onClick={() => table.resetColumnFilters()}\n        >\n          Reset\n          <X className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n}",
          "table-actions.tsx": "'use client';\n\nimport { Table } from '@tanstack/react-table';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Download, Eye, Trash2 } from 'lucide-react';\n\ninterface DataTableActionsProps<TData> {\n  table: Table<TData>;\n  onExport?: () => void;\n  onDelete?: (rows: TData[]) => void;\n  customActions?: Array<{\n    label: string;\n    icon?: React.ComponentType<{ className?: string }>;\n    onClick: (rows: TData[]) => void;\n    variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  }>;\n}\n\nexport function DataTableActions<TData>({\n  table,\n  onExport,\n  onDelete,\n  customActions = [],\n}: DataTableActionsProps<TData>) {\n  const selectedRows = table.getFilteredSelectedRowModel().rows;\n  const hasSelection = selectedRows.length > 0;\n  \n  return (\n    <div className=\"flex items-center gap-2\">\n      {/* Column visibility */}\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\">\n            <Eye className=\"mr-2 h-4 w-4\" />\n            Columns\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          {table\n            .getAllColumns()\n            .filter((column) => column.getCanHide())\n            .map((column) => {\n              return (\n                <DropdownMenuCheckboxItem\n                  key={column.id}\n                  className=\"capitalize\"\n                  checked={column.getIsVisible()}\n                  onCheckedChange={(value) => column.toggleVisibility(!!value)}\n                >\n                  {column.id}\n                </DropdownMenuCheckboxItem>\n              );\n            })}\n        </DropdownMenuContent>\n      </DropdownMenu>\n      \n      {/* Export */}\n      {onExport && (\n        <Button variant=\"outline\" size=\"sm\" onClick={onExport}>\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export\n        </Button>\n      )}\n      \n      {/* Bulk actions */}\n      {hasSelection && (\n        <>\n          <span className=\"text-sm text-muted-foreground\">\n            {selectedRows.length} selected\n          </span>\n          \n          {onDelete && (\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => onDelete(selectedRows.map(row => row.original))}\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Delete\n            </Button>\n          )}\n          \n          {customActions.map((action, index) => (\n            <Button\n              key={index}\n              variant={action.variant || 'outline'}\n              size=\"sm\"\n              onClick={() => action.onClick(selectedRows.map(row => row.original))}\n            >\n              {action.icon && <action.icon className=\"mr-2 h-4 w-4\" />}\n              {action.label}\n            </Button>\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\n// Pagination component\nexport function DataTablePagination<TData>({ table }: { table: Table<TData> }) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of{' '}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{' '}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "npm run lint",
            "grep -r 'createSortableColumn\\|DataTableSearch' src/"
          ],
          "expectedOutput": "Utilities are being used in at least 2 table implementations"
        },
        "acceptance": {
          "criteria": [
            "Common column patterns extracted (select, sortable, actions)",
            "Search input wrapper component created",
            "Action button patterns standardized",
            "Filter components consolidated",
            "TypeScript types fully defined",
            "Utilities used in multiple tables",
            "Documentation included in code",
            "Export functionality included"
          ]
        }
      },
      {
        "id": 17,
        "title": "Standardize Component Imports",
        "description": "Update all admin pages to use consistent @/components/ui/* import patterns with ESLint enforcement",
        "status": "pending",
        "priority": "medium",
        "dependencies": [16],
        "phase": "4",
        "week": "4",
        "files": [
          "src/app/documents/page.tsx",
          "src/app/directory/page.tsx",
          "src/app/providers/page.tsx",
          ".eslintrc.json",
          "scripts/fix-imports.js"
        ],
        "implementation": {
          ".eslintrc.json.addition": "{\n  \"rules\": {\n    \"no-restricted-imports\": [\n      \"error\",\n      {\n        \"patterns\": [\n          {\n            \"group\": [\"../ui/*\", \"../../ui/*\", \"../../../ui/*\"],\n            \"message\": \"Use @/components/ui/* imports instead of relative imports\"\n          },\n          {\n            \"group\": [\"@/components/shared/*\"],\n            \"message\": \"Prefer @/components/ui/* for UI components\"\n          }\n        ]\n      }\n    ],\n    \"import/order\": [\n      \"error\",\n      {\n        \"groups\": [\n          \"builtin\",\n          \"external\",\n          \"internal\",\n          [\"parent\", \"sibling\"],\n          \"index\"\n        ],\n        \"pathGroups\": [\n          {\n            \"pattern\": \"@/components/ui/*\",\n            \"group\": \"internal\",\n            \"position\": \"after\"\n          },\n          {\n            \"pattern\": \"@/lib/*\",\n            \"group\": \"internal\",\n            \"position\": \"after\"\n          }\n        ],\n        \"newlines-between\": \"always\",\n        \"alphabetize\": {\n          \"order\": \"asc\",\n          \"caseInsensitive\": true\n        }\n      }\n    ]\n  }\n}",
          "fix-imports.js": "const fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\n\n// Fix import patterns across the codebase\nconst files = glob.sync('src/app/**/*.{ts,tsx}');\n\nconst importMappings = {\n  // Relative imports to absolute\n  '../ui/': '@/components/ui/',\n  '../../ui/': '@/components/ui/',\n  '../../../ui/': '@/components/ui/',\n  '../components/ui/': '@/components/ui/',\n  '../../components/ui/': '@/components/ui/',\n  \n  // Shared to ui\n  '@/components/shared/button': '@/components/ui/button',\n  '@/components/shared/input': '@/components/ui/input',\n  '@/components/shared/card': '@/components/ui/card',\n};\n\nlet totalFixed = 0;\n\nfiles.forEach(file => {\n  let content = fs.readFileSync(file, 'utf8');\n  let modified = false;\n  \n  // Fix relative imports\n  Object.entries(importMappings).forEach(([pattern, replacement]) => {\n    const regex = new RegExp(`from ['\"](${pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'g');\n    const newContent = content.replace(regex, `from '${replacement}`);\n    if (newContent !== content) {\n      content = newContent;\n      modified = true;\n    }\n  });\n  \n  // Sort imports\n  const importRegex = /^import[^;]+;$/gm;\n  const imports = content.match(importRegex) || [];\n  \n  if (imports.length > 0) {\n    const sortedImports = sortImports(imports);\n    const firstImportIndex = content.indexOf(imports[0]);\n    const lastImportIndex = content.lastIndexOf(imports[imports.length - 1]) + imports[imports.length - 1].length;\n    \n    const newImportBlock = sortedImports.join('\\n');\n    const newContent = \n      content.substring(0, firstImportIndex) +\n      newImportBlock +\n      content.substring(lastImportIndex);\n    \n    if (newContent !== content) {\n      content = newContent;\n      modified = true;\n    }\n  }\n  \n  if (modified) {\n    fs.writeFileSync(file, content);\n    console.log(`‚úÖ Fixed imports in: ${file}`);\n    totalFixed++;\n  }\n});\n\nfunction sortImports(imports) {\n  const groups = {\n    react: [],\n    next: [],\n    external: [],\n    ui: [],\n    lib: [],\n    internal: [],\n    relative: [],\n    css: [],\n  };\n  \n  imports.forEach(imp => {\n    if (imp.includes('react')) groups.react.push(imp);\n    else if (imp.includes('next/')) groups.next.push(imp);\n    else if (imp.includes('@/components/ui/')) groups.ui.push(imp);\n    else if (imp.includes('@/lib/')) groups.lib.push(imp);\n    else if (imp.includes('@/')) groups.internal.push(imp);\n    else if (imp.includes('./') || imp.includes('../')) groups.relative.push(imp);\n    else if (imp.includes('.css') || imp.includes('.scss')) groups.css.push(imp);\n    else groups.external.push(imp);\n  });\n  \n  // Sort each group\n  Object.keys(groups).forEach(key => {\n    groups[key].sort();\n  });\n  \n  // Combine with proper spacing\n  const sorted = [];\n  const order = ['react', 'next', 'external', 'ui', 'lib', 'internal', 'relative', 'css'];\n  \n  order.forEach(key => {\n    if (groups[key].length > 0) {\n      if (sorted.length > 0) sorted.push(''); // Empty line between groups\n      sorted.push(...groups[key]);\n    }\n  });\n  \n  return sorted;\n}\n\nconsole.log(`\\nüéâ Fixed imports in ${totalFixed} files!`);\nconsole.log('\\nüìã Run \"npm run lint\" to verify all imports are correct.');"
        },
        "commands": [
          "node scripts/fix-imports.js",
          "npm run lint:fix",
          "npm run lint"
        ],
        "validation": {
          "commands": [
            "npm run lint",
            "grep -r \"../ui/\" src/app/ || echo 'No relative UI imports ‚úÖ'"
          ],
          "expectedOutput": "No ESLint errors for import patterns"
        },
        "acceptance": {
          "criteria": [
            "All imports use @/components/ui/* pattern",
            "No relative imports for UI components",
            "Import aliases consistent across all files",
            "ESLint rule added to enforce pattern",
            "Automated fix script created",
            "Import ordering standardized",
            "No lint errors after migration"
          ]
        }
      },
      {
        "id": 18,
        "title": "Create useDataTable Hook",
        "description": "Build a custom hook for common table state management, column visibility, and filtering with full TypeScript support",
        "status": "pending",
        "priority": "medium",
        "dependencies": [17],
        "phase": "4",
        "week": "4",
        "files": [
          "src/hooks/use-data-table.ts",
          "src/hooks/use-data-table.test.ts",
          "src/app/examples/table-with-hook.tsx"
        ],
        "implementation": {
          "use-data-table.ts": "import { useState, useMemo, useCallback } from 'react';\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  PaginationState,\n  RowSelectionState,\n} from '@tanstack/react-table';\n\nexport interface UseDataTableProps<TData> {\n  data: TData[];\n  columns: ColumnDef<TData>[];\n  pageSize?: number;\n  enableSelection?: boolean;\n  enableSorting?: boolean;\n  enableFiltering?: boolean;\n  defaultSorting?: SortingState;\n  defaultColumnVisibility?: VisibilityState;\n}\n\nexport interface UseDataTableReturn<TData> {\n  table: ReturnType<typeof useReactTable<TData>>;\n  // State\n  sorting: SortingState;\n  setSorting: React.Dispatch<React.SetStateAction<SortingState>>;\n  columnFilters: ColumnFiltersState;\n  setColumnFilters: React.Dispatch<React.SetStateAction<ColumnFiltersState>>;\n  columnVisibility: VisibilityState;\n  setColumnVisibility: React.Dispatch<React.SetStateAction<VisibilityState>>;\n  rowSelection: RowSelectionState;\n  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>;\n  pagination: PaginationState;\n  setPagination: React.Dispatch<React.SetStateAction<PaginationState>>;\n  // Helpers\n  selectedRows: TData[];\n  clearSelection: () => void;\n  selectAll: () => void;\n  isAllSelected: boolean;\n  hasSelection: boolean;\n  // Filters\n  globalFilter: string;\n  setGlobalFilter: (value: string) => void;\n  clearFilters: () => void;\n  // Export\n  exportData: (format: 'csv' | 'json') => void;\n}\n\nexport function useDataTable<TData>({\n  data,\n  columns,\n  pageSize = 10,\n  enableSelection = true,\n  enableSorting = true,\n  enableFiltering = true,\n  defaultSorting = [],\n  defaultColumnVisibility = {},\n}: UseDataTableProps<TData>): UseDataTableReturn<TData> {\n  // State\n  const [sorting, setSorting] = useState<SortingState>(defaultSorting);\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(defaultColumnVisibility);\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n  const [globalFilter, setGlobalFilter] = useState('');\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize,\n  });\n  \n  // Table instance\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: enableSorting ? getSortedRowModel() : undefined,\n    getFilteredRowModel: enableFiltering ? getFilteredRowModel() : undefined,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange: setPagination,\n    onGlobalFilterChange: setGlobalFilter,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      pagination,\n      globalFilter,\n    },\n    enableRowSelection: enableSelection,\n  });\n  \n  // Helpers\n  const selectedRows = useMemo(() => {\n    return table.getFilteredSelectedRowModel().rows.map(row => row.original);\n  }, [table, rowSelection]);\n  \n  const clearSelection = useCallback(() => {\n    setRowSelection({});\n  }, []);\n  \n  const selectAll = useCallback(() => {\n    table.toggleAllPageRowsSelected(true);\n  }, [table]);\n  \n  const isAllSelected = table.getIsAllPageRowsSelected();\n  const hasSelection = Object.keys(rowSelection).length > 0;\n  \n  const clearFilters = useCallback(() => {\n    setColumnFilters([]);\n    setGlobalFilter('');\n  }, []);\n  \n  // Export functionality\n  const exportData = useCallback((format: 'csv' | 'json') => {\n    const dataToExport = hasSelection ? selectedRows : data;\n    \n    if (format === 'json') {\n      const json = JSON.stringify(dataToExport, null, 2);\n      downloadFile(json, 'data.json', 'application/json');\n    } else {\n      const csv = convertToCSV(dataToExport);\n      downloadFile(csv, 'data.csv', 'text/csv');\n    }\n  }, [data, selectedRows, hasSelection]);\n  \n  return {\n    table,\n    // State\n    sorting,\n    setSorting,\n    columnFilters,\n    setColumnFilters,\n    columnVisibility,\n    setColumnVisibility,\n    rowSelection,\n    setRowSelection,\n    pagination,\n    setPagination,\n    // Helpers\n    selectedRows,\n    clearSelection,\n    selectAll,\n    isAllSelected,\n    hasSelection,\n    // Filters\n    globalFilter,\n    setGlobalFilter,\n    clearFilters,\n    // Export\n    exportData,\n  };\n}\n\n// Utility functions\nfunction convertToCSV(data: any[]): string {\n  if (data.length === 0) return '';\n  \n  const headers = Object.keys(data[0]);\n  const csvHeaders = headers.join(',');\n  \n  const csvRows = data.map(row => {\n    return headers.map(header => {\n      const value = row[header];\n      // Escape quotes and wrap in quotes if contains comma\n      const escaped = String(value).replace(/\"/g, '\"\"');\n      return escaped.includes(',') ? `\"${escaped}\"` : escaped;\n    }).join(',');\n  });\n  \n  return [csvHeaders, ...csvRows].join('\\n');\n}\n\nfunction downloadFile(content: string, filename: string, mimeType: string) {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}",
          "table-with-hook.tsx": "'use client';\n\nimport { useDataTable } from '@/hooks/use-data-table';\nimport { DataTable } from '@/components/ui/data-table';\nimport { DataTableSearch } from '@/components/ui/table-filters';\nimport { DataTableActions } from '@/components/ui/table-actions';\nimport { createSortableColumn, createSelectColumn, createActionColumn } from '@/lib/table-utilities';\n\n// Example usage\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: 'active' | 'inactive';\n}\n\nconst data: User[] = [\n  { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin', status: 'active' },\n  { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'User', status: 'active' },\n  // ... more data\n];\n\nexport function UsersTable() {\n  const columns = [\n    createSelectColumn<User>(),\n    createSortableColumn<User>({\n      accessorKey: 'name',\n      header: 'Name',\n    }),\n    createSortableColumn<User>({\n      accessorKey: 'email',\n      header: 'Email',\n    }),\n    createSortableColumn<User>({\n      accessorKey: 'role',\n      header: 'Role',\n    }),\n    createSortableColumn<User>({\n      accessorKey: 'status',\n      header: 'Status',\n      cell: (value) => (\n        <span className={value === 'active' ? 'text-green-600' : 'text-gray-400'}>\n          {value}\n        </span>\n      ),\n    }),\n    createActionColumn<User>({\n      actions: [\n        {\n          label: 'Edit',\n          onClick: (user) => console.log('Edit', user),\n        },\n        {\n          label: 'Delete',\n          onClick: (user) => console.log('Delete', user),\n        },\n      ],\n    }),\n  ];\n  \n  const {\n    table,\n    globalFilter,\n    setGlobalFilter,\n    hasSelection,\n    selectedRows,\n    clearSelection,\n    exportData,\n  } = useDataTable({\n    data,\n    columns,\n    pageSize: 20,\n  });\n  \n  const handleBulkDelete = () => {\n    console.log('Deleting users:', selectedRows);\n    // Implement delete logic\n    clearSelection();\n  };\n  \n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <DataTableSearch\n          table={table}\n          searchKey=\"name\"\n          placeholder=\"Search by name...\"\n        />\n        \n        <DataTableActions\n          table={table}\n          onExport={() => exportData('csv')}\n          onDelete={hasSelection ? handleBulkDelete : undefined}\n        />\n      </div>\n      \n      <DataTable table={table} columns={columns} data={data} />\n    </div>\n  );\n}"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "npm test use-data-table",
            "grep -r 'useDataTable' src/app/"
          ],
          "expectedOutput": "Hook is type-safe and used in at least 2 table implementations"
        },
        "acceptance": {
          "criteria": [
            "Hook manages table state (sorting, filtering, pagination)",
            "Column visibility controls included",
            "Filter state management implemented",
            "TypeScript fully typed with generics",
            "Used in at least 2 tables",
            "Export functionality included",
            "Selection helpers provided",
            "Tests written for the hook"
          ]
        }
      },
      {
        "id": 19,
        "title": "Document shadcn/ui Usage Patterns",
        "description": "Create comprehensive documentation for consistent shadcn/ui component usage across the team with examples and best practices",
        "status": "pending",
        "priority": "low",
        "dependencies": [18],
        "phase": "4",
        "week": "4",
        "files": [
          "docs/SHADCN_PATTERNS.md",
          "docs/examples/shadcn-examples.tsx"
        ],
        "implementation": {
          "SHADCN_PATTERNS.md": "# shadcn/ui Component Usage Patterns\n\n## Overview\nThis guide establishes patterns for using shadcn/ui components consistently across the WCINYP application.\n\n## Core Principles\n\n### 1. Composition Over Configuration\n```tsx\n// ‚ùå Bad: Over-configured single component\n<SuperButton \n  icon=\"save\" \n  label=\"Save\" \n  loading={loading} \n  disabled={disabled}\n  variant=\"primary\"\n  size=\"large\"\n/>\n\n// ‚úÖ Good: Composed from primitives\n<Button variant=\"default\" size=\"lg\" disabled={disabled || loading}>\n  {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n  Save\n</Button>\n```\n\n### 2. Consistent Spacing\n```tsx\n// ‚ùå Bad: Inline arbitrary spacing\n<div style={{ marginTop: '20px' }}>\n\n// ‚úÖ Good: Tailwind spacing utilities\n<div className=\"mt-5\">\n\n// ‚úÖ Better: Consistent spacing scale\n<div className=\"space-y-4\"> {/* 16px gaps */}\n  <Card>...</Card>\n  <Card>...</Card>\n</div>\n```\n\n### 3. Accessible by Default\n```tsx\n// ‚ùå Bad: Missing ARIA labels\n<Button onClick={handleDelete}>\n  <Trash2 className=\"h-4 w-4\" />\n</Button>\n\n// ‚úÖ Good: Proper accessibility\n<Button onClick={handleDelete} aria-label=\"Delete item\">\n  <Trash2 className=\"h-4 w-4\" />\n  <span className=\"sr-only\">Delete</span>\n</Button>\n```\n\n## Component Patterns\n\n### Forms\n```tsx\n// Standard form field pattern\n<div className=\"space-y-4\">\n  <div className=\"space-y-2\">\n    <Label htmlFor=\"email\">Email</Label>\n    <Input \n      id=\"email\" \n      type=\"email\" \n      placeholder=\"Enter your email\"\n      {...register('email')}\n    />\n    {errors.email && (\n      <p className=\"text-sm text-destructive\">{errors.email.message}</p>\n    )}\n  </div>\n</div>\n```\n\n### Dialogs\n```tsx\n// Consistent dialog pattern\n<Dialog open={open} onOpenChange={setOpen}>\n  <DialogTrigger asChild>\n    <Button variant=\"outline\">Open Dialog</Button>\n  </DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Dialog Title</DialogTitle>\n      <DialogDescription>\n        Dialog description goes here.\n      </DialogDescription>\n    </DialogHeader>\n    {/* Content */}\n    <DialogFooter>\n      <Button variant=\"outline\" onClick={() => setOpen(false)}>\n        Cancel\n      </Button>\n      <Button onClick={handleSubmit}>Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n```\n\n### Data Display\n```tsx\n// Card-based data display\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    {/* Main content */}\n  </CardContent>\n  <CardFooter className=\"flex justify-between\">\n    <Button variant=\"outline\">Cancel</Button>\n    <Button>Save</Button>\n  </CardFooter>\n</Card>\n```\n\n### Loading States\n```tsx\n// Consistent loading pattern\nfunction LoadingButton({ loading, ...props }) {\n  return (\n    <Button disabled={loading} {...props}>\n      {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n      {props.children}\n    </Button>\n  );\n}\n\n// Skeleton loading\n<div className=\"space-y-4\">\n  <Skeleton className=\"h-4 w-[250px]\" />\n  <Skeleton className=\"h-4 w-[200px]\" />\n</div>\n```\n\n## Common Mistakes to Avoid\n\n### 1. Mixing UI Libraries\n```tsx\n// ‚ùå Bad: Mixing MUI with shadcn/ui\nimport { Button as MuiButton } from '@mui/material';\nimport { Button } from '@/components/ui/button';\n\n// ‚úÖ Good: Consistent usage\nimport { Button } from '@/components/ui/button';\n```\n\n### 2. Custom Styling Over Variants\n```tsx\n// ‚ùå Bad: Custom styles when variant exists\n<Button className=\"bg-red-500 hover:bg-red-600 text-white\">\n\n// ‚úÖ Good: Use existing variants\n<Button variant=\"destructive\">\n```\n\n### 3. Inconsistent Icon Usage\n```tsx\n// ‚ùå Bad: Mixed icon libraries\nimport { FaSave } from 'react-icons/fa';\nimport { Trash2 } from 'lucide-react';\n\n// ‚úÖ Good: Consistent lucide-react usage\nimport { Save, Trash2 } from 'lucide-react';\n```\n\n## Best Practices\n\n### 1. Component Organization\n```\n// Import order\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\nimport { api } from '@/lib/api';\nimport { formatDate } from '@/lib/utils';\n```\n\n### 2. Responsive Design\n```tsx\n// Mobile-first responsive design\n<div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n  {/* Cards adapt to screen size */}\n</div>\n```\n\n### 3. Dark Mode Support\n```tsx\n// Always consider dark mode\n<Card className=\"border-gray-200 dark:border-gray-800\">\n  <CardContent className=\"text-gray-900 dark:text-gray-100\">\n    {/* Content */}\n  </CardContent>\n</Card>\n```\n\n### 4. Type Safety\n```tsx\n// Define prop types for custom components\ninterface CustomCardProps {\n  title: string;\n  description?: string;\n  actions?: React.ReactNode;\n  children: React.ReactNode;\n}\n\nexport function CustomCard({ \n  title, \n  description, \n  actions, \n  children \n}: CustomCardProps) {\n  // Implementation\n}\n```\n\n## Testing Patterns\n\n```tsx\n// Test by behavior, not implementation\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\ntest('submits form with valid data', async () => {\n  const user = userEvent.setup();\n  render(<MyForm />);\n  \n  await user.type(screen.getByLabelText('Email'), 'test@example.com');\n  await user.click(screen.getByRole('button', { name: 'Submit' }));\n  \n  expect(screen.getByText('Success')).toBeInTheDocument();\n});\n```\n\n## Migration Guide\n\nWhen migrating from other UI libraries:\n\n1. **Identify equivalent components**\n   - Material-UI ‚Üí shadcn/ui mapping\n   - Ant Design ‚Üí shadcn/ui mapping\n\n2. **Update imports systematically**\n   ```bash\n   node scripts/migrate-ui-components.js\n   ```\n\n3. **Test thoroughly**\n   - Visual regression tests\n   - Accessibility audits\n   - Cross-browser testing\n\n## Resources\n\n- [shadcn/ui Documentation](https://ui.shadcn.com)\n- [Radix UI Primitives](https://www.radix-ui.com)\n- [Tailwind CSS](https://tailwindcss.com)\n- Internal: `/docs/examples/shadcn-examples.tsx`"
        },
        "validation": {
          "commands": [
            "cat docs/SHADCN_PATTERNS.md | wc -l",
            "grep -c '```' docs/SHADCN_PATTERNS.md"
          ],
          "expectedOutput": "Documentation is comprehensive with multiple code examples"
        },
        "acceptance": {
          "criteria": [
            "Component usage guidelines documented",
            "Common patterns explained with examples",
            "Do's and don'ts listed clearly",
            "Code examples provided for each pattern",
            "Testing patterns included",
            "Migration guide provided",
            "Accessibility guidelines included",
            "Dark mode considerations documented"
          ]
        }
      },
      {
        "id": 161,
        "title": "Create Core Table Utilities",
        "description": "Create table-utilities.ts with column factories, formatters, and type definitions",
        "status": "in_progress",
        "priority": "high",
        "dependencies": [16],
        "phase": "4",
        "week": "4",
        "files": [
          "src/lib/table-utilities.ts"
        ],
        "commands": [
          "mkdir -p src/lib",
          "npm run type-check",
          "npm run lint"
        ],
        "implementation": {
          "table-utilities.ts": "import { ColumnDef } from '@tanstack/react-table';\nimport { Button } from '@/components/ui/button';\nimport { ArrowUpDown, MoreHorizontal } from 'lucide-react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\n// TypeScript types for table utilities\nexport interface TableColumnFactory<T> {\n  createSelectColumn: () => ColumnDef<T>;\n  createSortableColumn: (config: SortableColumnConfig<T>) => ColumnDef<T>;\n  createActionColumn: (config: ActionColumnConfig<T>) => ColumnDef<T>;\n}\n\nexport interface SortableColumnConfig<T> {\n  accessorKey: keyof T;\n  header: string;\n  cell?: (value: any) => React.ReactNode;\n  enableSorting?: boolean;\n  enableHiding?: boolean;\n}\n\nexport interface ActionColumnConfig<T> {\n  actions: Array<{\n    label: string;\n    onClick: (row: T) => void;\n    icon?: React.ComponentType<{ className?: string }>;\n    destructive?: boolean;\n    disabled?: (row: T) => boolean;\n  }>;\n  dropdownAlign?: 'start' | 'center' | 'end';\n}\n\n// Generic column helpers\nexport function createSelectColumn<T>(): ColumnDef<T> {\n  return {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && 'indeterminate')\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  };\n}\n\nexport function createSortableColumn<T>({\n  accessorKey,\n  header,\n  cell,\n  enableSorting = true,\n  enableHiding = true,\n}: SortableColumnConfig<T>): ColumnDef<T> {\n  return {\n    accessorKey: accessorKey as string,\n    header: ({ column }) => {\n      if (!enableSorting) {\n        return header;\n      }\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n          className=\"-ml-2 h-auto p-2 font-medium\"\n        >\n          {header}\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: cell ? ({ row }) => cell(row.getValue(accessorKey as string)) : undefined,\n    enableSorting,\n    enableHiding,\n  };\n}\n\nexport function createActionColumn<T>({\n  actions,\n  dropdownAlign = 'end',\n}: ActionColumnConfig<T>): ColumnDef<T> {\n  return {\n    id: 'actions',\n    enableHiding: false,\n    cell: ({ row }) => {\n      const data = row.original;\n      \n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0\"\n              aria-label=\"Open menu\"\n            >\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align={dropdownAlign} className=\"w-[160px]\">\n            {actions.map((action, index) => {\n              const isDisabled = action.disabled?.(data) ?? false;\n              return (\n                <DropdownMenuItem\n                  key={index}\n                  onClick={() => !isDisabled && action.onClick(data)}\n                  disabled={isDisabled}\n                  className={action.destructive ? 'text-destructive' : ''}\n                >\n                  {action.icon && <action.icon className=\"mr-2 h-4 w-4\" />}\n                  {action.label}\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  };\n}\n\n// Common formatters\nexport const formatters = {\n  date: (date: string | Date, format?: Intl.DateTimeFormatOptions) => {\n    if (!date) return '-';\n    return new Date(date).toLocaleDateString('en-US', format ?? {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  },\n  \n  dateTime: (date: string | Date) => {\n    if (!date) return '-';\n    return new Date(date).toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  },\n  \n  currency: (amount: number, currency = 'USD') => {\n    if (amount === null || amount === undefined) return '-';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n    }).format(amount);\n  },\n  \n  percentage: (value: number, decimals = 1) => {\n    if (value === null || value === undefined) return '-';\n    return `${(value * 100).toFixed(decimals)}%`;\n  },\n  \n  boolean: (value: boolean, trueText = '‚úì', falseText = '‚úó') => {\n    return value ? trueText : falseText;\n  },\n  \n  truncate: (text: string, maxLength = 50) => {\n    if (!text) return '-';\n    if (text.length <= maxLength) return text;\n    return `${text.substring(0, maxLength)}...`;\n  },\n  \n  number: (value: number, decimals?: number) => {\n    if (value === null || value === undefined) return '-';\n    if (decimals !== undefined) {\n      return value.toFixed(decimals);\n    }\n    return value.toLocaleString('en-US');\n  },\n};\n\n// Column factory creator for type safety\nexport function createTableColumnFactory<T>(): TableColumnFactory<T> {\n  return {\n    createSelectColumn: () => createSelectColumn<T>(),\n    createSortableColumn: (config) => createSortableColumn<T>(config),\n    createActionColumn: (config) => createActionColumn<T>(config),\n  };\n}\n\n// Export all utilities\nexport default {\n  createSelectColumn,\n  createSortableColumn,\n  createActionColumn,\n  formatters,\n  createTableColumnFactory,\n};"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "grep -c 'export' src/lib/table-utilities.ts",
            "npm run lint src/lib/table-utilities.ts"
          ],
          "expectedOutput": "Type checking passes, multiple exports found, no lint errors"
        },
        "acceptance": {
          "criteria": [
            "Column factories created (select, sortable, action)",
            "Formatters implemented (date, currency, percentage, boolean, truncate, number)",
            "TypeScript types fully defined",
            "Exports configured properly",
            "All utilities are generic and reusable",
            "Accessibility attributes included",
            "Documentation comments added"
          ]
        }
      },
      {
        "id": 162,
        "title": "Create Table Column Components",
        "description": "Build reusable column components for common patterns",
        "status": "pending",
        "priority": "high",
        "dependencies": [161],
        "phase": "4",
        "week": "4",
        "files": [
          "src/components/ui/table-columns.tsx"
        ],
        "commands": [
          "npm run type-check",
          "npm run lint"
        ],
        "implementation": {
          "table-columns.tsx": "'use client';\n\nimport { Column } from '@tanstack/react-table';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { ArrowUpDown, ArrowUp, ArrowDown, Mail, Phone, MapPin } from 'lucide-react';\n\n// Sortable header component\ninterface SortableHeaderProps<TData, TValue> {\n  column: Column<TData, TValue>;\n  title: string;\n  className?: string;\n}\n\nexport function SortableHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: SortableHeaderProps<TData, TValue>) {\n  const isSorted = column.getIsSorted();\n  \n  return (\n    <Button\n      variant=\"ghost\"\n      onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n      className={cn('-ml-2 h-auto p-2 font-medium hover:bg-transparent', className)}\n    >\n      {title}\n      {isSorted === 'asc' ? (\n        <ArrowUp className=\"ml-2 h-4 w-4\" />\n      ) : isSorted === 'desc' ? (\n        <ArrowDown className=\"ml-2 h-4 w-4\" />\n      ) : (\n        <ArrowUpDown className=\"ml-2 h-4 w-4 text-muted-foreground\" />\n      )}\n    </Button>\n  );\n}\n\n// Status badge component\nexport interface StatusConfig {\n  [key: string]: {\n    label: string;\n    variant: 'default' | 'secondary' | 'destructive' | 'outline';\n    className?: string;\n  };\n}\n\ninterface StatusBadgeProps {\n  status: string;\n  config?: StatusConfig;\n}\n\nconst defaultStatusConfig: StatusConfig = {\n  active: { label: 'Active', variant: 'default', className: 'bg-green-500' },\n  inactive: { label: 'Inactive', variant: 'secondary' },\n  pending: { label: 'Pending', variant: 'outline' },\n  error: { label: 'Error', variant: 'destructive' },\n};\n\nexport function StatusBadge({ status, config = defaultStatusConfig }: StatusBadgeProps) {\n  const statusConfig = config[status] || { label: status, variant: 'outline' };\n  \n  return (\n    <Badge\n      variant={statusConfig.variant}\n      className={cn('capitalize', statusConfig.className)}\n    >\n      {statusConfig.label}\n    </Badge>\n  );\n}\n\n// Contact info component\ninterface ContactInfoProps {\n  name?: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  avatar?: string;\n  avatarFallback?: string;\n}\n\nexport function ContactInfo({\n  name,\n  email,\n  phone,\n  address,\n  avatar,\n  avatarFallback,\n}: ContactInfoProps) {\n  return (\n    <div className=\"flex items-center gap-3\">\n      {(avatar || avatarFallback) && (\n        <Avatar className=\"h-8 w-8\">\n          {avatar && <AvatarImage src={avatar} alt={name} />}\n          <AvatarFallback>{avatarFallback || name?.charAt(0) || '?'}</AvatarFallback>\n        </Avatar>\n      )}\n      <div className=\"flex flex-col\">\n        {name && <span className=\"font-medium\">{name}</span>}\n        <div className=\"flex flex-wrap items-center gap-3 text-sm text-muted-foreground\">\n          {email && (\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <a\n                    href={`mailto:${email}`}\n                    className=\"flex items-center gap-1 hover:text-primary\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <Mail className=\"h-3 w-3\" />\n                    <span className=\"truncate max-w-[200px]\">{email}</span>\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Send email to {email}</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n          {phone && (\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <a\n                    href={`tel:${phone}`}\n                    className=\"flex items-center gap-1 hover:text-primary\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <Phone className=\"h-3 w-3\" />\n                    <span>{phone}</span>\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Call {phone}</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n          {address && (\n            <span className=\"flex items-center gap-1\">\n              <MapPin className=\"h-3 w-3\" />\n              <span className=\"truncate max-w-[200px]\">{address}</span>\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Actions column component (simplified dropdown alternative)\ninterface ActionsColumnProps<T> {\n  row: T;\n  actions: Array<{\n    label: string;\n    onClick: (row: T) => void;\n    icon?: React.ComponentType<{ className?: string }>;\n    variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    size?: 'default' | 'sm' | 'lg' | 'icon';\n  }>;\n}\n\nexport function ActionsColumn<T>({ row, actions }: ActionsColumnProps<T>) {\n  return (\n    <div className=\"flex items-center gap-2\">\n      {actions.map((action, index) => (\n        <Button\n          key={index}\n          variant={action.variant || 'ghost'}\n          size={action.size || 'icon'}\n          onClick={(e) => {\n            e.stopPropagation();\n            action.onClick(row);\n          }}\n          className=\"h-8 w-8\"\n        >\n          {action.icon ? (\n            <>\n              <action.icon className=\"h-4 w-4\" />\n              <span className=\"sr-only\">{action.label}</span>\n            </>\n          ) : (\n            action.label\n          )}\n        </Button>\n      ))}\n    </div>\n  );\n}\n\n// Progress bar component\ninterface ProgressBarProps {\n  value: number;\n  max?: number;\n  label?: string;\n  showPercentage?: boolean;\n  className?: string;\n  variant?: 'default' | 'success' | 'warning' | 'danger';\n}\n\nexport function ProgressBar({\n  value,\n  max = 100,\n  label,\n  showPercentage = true,\n  className,\n  variant = 'default',\n}: ProgressBarProps) {\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100));\n  \n  const variantClasses = {\n    default: 'bg-primary',\n    success: 'bg-green-500',\n    warning: 'bg-yellow-500',\n    danger: 'bg-red-500',\n  };\n  \n  return (\n    <div className=\"w-full\">\n      {(label || showPercentage) && (\n        <div className=\"mb-1 flex justify-between text-sm\">\n          {label && <span className=\"text-muted-foreground\">{label}</span>}\n          {showPercentage && <span className=\"font-medium\">{percentage.toFixed(0)}%</span>}\n        </div>\n      )}\n      <div className=\"h-2 w-full overflow-hidden rounded-full bg-secondary\">\n        <div\n          className={cn(\n            'h-full transition-all duration-300 ease-in-out',\n            variantClasses[variant],\n            className\n          )}\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n    </div>\n  );\n}\n\n// Export all components\nexport default {\n  SortableHeader,\n  StatusBadge,\n  ContactInfo,\n  ActionsColumn,\n  ProgressBar,\n};"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "grep -c 'export function' src/components/ui/table-columns.tsx",
            "npm run lint src/components/ui/table-columns.tsx"
          ],
          "expectedOutput": "Type checking passes, 5 components exported, no lint errors"
        },
        "acceptance": {
          "criteria": [
            "SortableHeader component created with sort indicators",
            "ActionsColumn component for inline actions",
            "StatusBadge component with configurable variants",
            "ContactInfo component for displaying user information",
            "ProgressBar component for data visualization",
            "All components properly typed with TypeScript",
            "Components are reusable and configurable",
            "Accessibility considerations included"
          ]
        }
      },
      {
        "id": 163,
        "title": "Create Table Filter Components",
        "description": "Implement filter components for tables",
        "status": "pending",
        "priority": "high",
        "dependencies": [162],
        "phase": "4",
        "week": "4",
        "files": [
          "src/components/ui/table-filters.tsx"
        ],
        "commands": [
          "npm run type-check",
          "npm run lint"
        ],
        "implementation": {
          "table-filters.tsx": "'use client';\n\nimport { Table } from '@tanstack/react-table';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { cn } from '@/lib/utils';\nimport { CalendarIcon, Search, X, Filter, Check } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { DateRange } from 'react-day-picker';\n\n// Table search component\ninterface TableSearchProps<TData> {\n  table: Table<TData>;\n  searchKey: string;\n  placeholder?: string;\n  className?: string;\n  debounce?: number;\n}\n\nexport function TableSearch<TData>({\n  table,\n  searchKey,\n  placeholder = 'Search...',\n  className,\n  debounce = 300,\n}: TableSearchProps<TData>) {\n  const [value, setValue] = React.useState<string>(\n    (table.getColumn(searchKey)?.getFilterValue() as string) ?? ''\n  );\n  \n  React.useEffect(() => {\n    const timeout = setTimeout(() => {\n      table.getColumn(searchKey)?.setFilterValue(value);\n    }, debounce);\n    \n    return () => clearTimeout(timeout);\n  }, [value, table, searchKey, debounce]);\n  \n  return (\n    <div className={cn('relative', className)}>\n      <Search className=\"absolute left-2 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n      <Input\n        placeholder={placeholder}\n        value={value}\n        onChange={(event) => setValue(event.target.value)}\n        className=\"pl-8 pr-10\"\n      />\n      {value && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute right-0 top-0 h-full px-3\"\n          onClick={() => {\n            setValue('');\n            table.getColumn(searchKey)?.setFilterValue('');\n          }}\n        >\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Clear search</span>\n        </Button>\n      )}\n    </div>\n  );\n}\n\n// Date range picker component\ninterface DateRangePickerProps<TData> {\n  table: Table<TData>;\n  columnKey: string;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function DateRangePicker<TData>({\n  table,\n  columnKey,\n  placeholder = 'Pick a date range',\n  className,\n}: DateRangePickerProps<TData>) {\n  const [date, setDate] = React.useState<DateRange | undefined>();\n  \n  React.useEffect(() => {\n    table.getColumn(columnKey)?.setFilterValue(date);\n  }, [date, table, columnKey]);\n  \n  return (\n    <div className={cn('grid gap-2', className)}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant=\"outline\"\n            className={cn(\n              'justify-start text-left font-normal',\n              !date && 'text-muted-foreground'\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, 'LLL dd, y')} -{' '}\n                  {format(date.to, 'LLL dd, y')}\n                </>\n              ) : (\n                format(date.from, 'LLL dd, y')\n              )\n            ) : (\n              <span>{placeholder}</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={date?.from}\n            selected={date}\n            onSelect={setDate}\n            numberOfMonths={2}\n          />\n          <div className=\"border-t p-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"w-full\"\n              onClick={() => setDate(undefined)}\n            >\n              Clear\n            </Button>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\n// Multi-select filter component\ninterface MultiSelectProps<TData> {\n  table: Table<TData>;\n  columnKey: string;\n  title: string;\n  options: Array<{ label: string; value: string }>;\n  className?: string;\n}\n\nexport function MultiSelect<TData>({\n  table,\n  columnKey,\n  title,\n  options,\n  className,\n}: MultiSelectProps<TData>) {\n  const column = table.getColumn(columnKey);\n  const facets = column?.getFacetedUniqueValues();\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\n  \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className={cn('h-8 border-dashed', className)}\n        >\n          <Filter className=\"mr-2 h-4 w-4\" />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <div className=\"mx-2 h-4 w-[1px] bg-border\" />\n              <div className=\"flex space-x-1\">\n                {selectedValues.size > 2 ? (\n                  <span className=\"text-xs\">{selectedValues.size} selected</span>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <span key={option.value} className=\"text-xs\">\n                        {option.label}\n                      </span>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <div className=\"p-2\">\n          <Input\n            placeholder={`Search ${title.toLowerCase()}...`}\n            className=\"mb-2 h-8\"\n          />\n        </div>\n        <div className=\"max-h-[300px] overflow-auto\">\n          {options.map((option) => {\n            const isSelected = selectedValues.has(option.value);\n            const count = facets?.get(option.value) ?? 0;\n            \n            return (\n              <div\n                key={option.value}\n                className=\"flex items-center space-x-2 px-2 py-1.5 hover:bg-accent\"\n              >\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={(checked) => {\n                    const newValues = new Set(selectedValues);\n                    if (checked) {\n                      newValues.add(option.value);\n                    } else {\n                      newValues.delete(option.value);\n                    }\n                    const filterValues = Array.from(newValues);\n                    column?.setFilterValue(\n                      filterValues.length ? filterValues : undefined\n                    );\n                  }}\n                />\n                <Label\n                  htmlFor={option.value}\n                  className=\"flex flex-1 cursor-pointer items-center justify-between text-sm font-normal\"\n                >\n                  <span>{option.label}</span>\n                  {count > 0 && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      ({count})\n                    </span>\n                  )}\n                </Label>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"border-t p-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-full\"\n            onClick={() => column?.setFilterValue(undefined)}\n          >\n            Clear filters\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n// Column visibility menu component\ninterface ColumnVisibilityMenuProps<TData> {\n  table: Table<TData>;\n  className?: string;\n}\n\nexport function ColumnVisibilityMenu<TData>({\n  table,\n  className,\n}: ColumnVisibilityMenuProps<TData>) {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className={cn('ml-auto hidden h-8 lg:flex', className)}\n        >\n          Columns\n          <Filter className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"end\" className=\"w-[200px]\">\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium\">Toggle columns</h4>\n          <div className=\"text-sm text-muted-foreground\">\n            Show or hide columns in the table\n          </div>\n        </div>\n        <div className=\"mt-4 space-y-2\">\n          {table\n            .getAllColumns()\n            .filter(\n              (column) =>\n                typeof column.accessorFn !== 'undefined' &&\n                column.getCanHide()\n            )\n            .map((column) => {\n              return (\n                <div\n                  key={column.id}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  />\n                  <Label\n                    htmlFor={column.id}\n                    className=\"text-sm font-normal capitalize\"\n                  >\n                    {column.id}\n                  </Label>\n                </div>\n              );\n            })}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n// Export all filter components\nexport default {\n  TableSearch,\n  DateRangePicker,\n  MultiSelect,\n  ColumnVisibilityMenu,\n};"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "grep -c 'export function' src/components/ui/table-filters.tsx",
            "npm run lint src/components/ui/table-filters.tsx"
          ],
          "expectedOutput": "Type checking passes, 4 filter components exported, no lint errors"
        },
        "acceptance": {
          "criteria": [
            "TableSearch component with debounced input",
            "DateRangePicker for date filtering",
            "MultiSelect for multiple value filtering",
            "ColumnVisibilityMenu for showing/hiding columns",
            "All components integrated with TanStack Table",
            "TypeScript generics properly implemented",
            "Accessibility attributes included",
            "Clear/reset functionality in all filters"
          ]
        }
      },
      {
        "id": 164,
        "title": "Create Table Action Components",
        "description": "Build action components for table toolbars",
        "status": "pending",
        "priority": "high",
        "dependencies": [163],
        "phase": "4",
        "week": "4",
        "files": [
          "src/components/ui/table-actions.tsx"
        ],
        "commands": [
          "npm run type-check",
          "npm run lint"
        ],
        "implementation": {
          "table-actions.tsx": "'use client';\n\nimport { Table } from '@tanstack/react-table';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { cn } from '@/lib/utils';\nimport {\n  Download,\n  Eye,\n  Trash2,\n  RefreshCw,\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n  FileDown,\n  FileSpreadsheet,\n  FileJson,\n} from 'lucide-react';\n\n// Bulk actions component\ninterface BulkActionsProps<TData> {\n  table: Table<TData>;\n  actions: Array<{\n    label: string;\n    onClick: (rows: TData[]) => void;\n    icon?: React.ComponentType<{ className?: string }>;\n    variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    requireConfirm?: boolean;\n  }>;\n  className?: string;\n}\n\nexport function BulkActions<TData>({\n  table,\n  actions,\n  className,\n}: BulkActionsProps<TData>) {\n  const selectedRows = table.getFilteredSelectedRowModel().rows;\n  const hasSelection = selectedRows.length > 0;\n  \n  if (!hasSelection) return null;\n  \n  return (\n    <div className={cn('flex items-center gap-2', className)}>\n      <span className=\"text-sm text-muted-foreground\">\n        {selectedRows.length} of {table.getFilteredRowModel().rows.length} row(s) selected\n      </span>\n      <div className=\"h-4 w-[1px] bg-border\" />\n      {actions.map((action, index) => (\n        <Button\n          key={index}\n          variant={action.variant || 'outline'}\n          size=\"sm\"\n          onClick={() => {\n            if (action.requireConfirm) {\n              if (confirm(`Are you sure you want to ${action.label.toLowerCase()} ${selectedRows.length} item(s)?`)) {\n                action.onClick(selectedRows.map(row => row.original));\n              }\n            } else {\n              action.onClick(selectedRows.map(row => row.original));\n            }\n          }}\n        >\n          {action.icon && <action.icon className=\"mr-2 h-4 w-4\" />}\n          {action.label}\n        </Button>\n      ))}\n    </div>\n  );\n}\n\n// Export button component\ninterface ExportButtonProps<TData> {\n  table: Table<TData>;\n  onExport: (format: 'csv' | 'json' | 'xlsx', data: TData[]) => void;\n  formats?: Array<'csv' | 'json' | 'xlsx'>;\n  className?: string;\n}\n\nexport function ExportButton<TData>({\n  table,\n  onExport,\n  formats = ['csv', 'json'],\n  className,\n}: ExportButtonProps<TData>) {\n  const selectedRows = table.getFilteredSelectedRowModel().rows;\n  const hasSelection = selectedRows.length > 0;\n  const dataToExport = hasSelection\n    ? selectedRows.map(row => row.original)\n    : table.getFilteredRowModel().rows.map(row => row.original);\n  \n  const formatIcons = {\n    csv: FileSpreadsheet,\n    json: FileJson,\n    xlsx: FileDown,\n  };\n  \n  const formatLabels = {\n    csv: 'Export as CSV',\n    json: 'Export as JSON',\n    xlsx: 'Export as Excel',\n  };\n  \n  if (formats.length === 1) {\n    const format = formats[0];\n    const Icon = formatIcons[format];\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => onExport(format, dataToExport)}\n        className={className}\n      >\n        <Icon className=\"mr-2 h-4 w-4\" />\n        Export\n      </Button>\n    );\n  }\n  \n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className={className}>\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuLabel>\n          Export {hasSelection ? `${selectedRows.length} selected` : 'all'} rows\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {formats.map((format) => {\n          const Icon = formatIcons[format];\n          return (\n            <DropdownMenuItem\n              key={format}\n              onClick={() => onExport(format, dataToExport)}\n            >\n              <Icon className=\"mr-2 h-4 w-4\" />\n              {formatLabels[format]}\n            </DropdownMenuItem>\n          );\n        })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\n// Refresh button component\ninterface RefreshButtonProps {\n  onRefresh: () => void | Promise<void>;\n  isRefreshing?: boolean;\n  className?: string;\n}\n\nexport function RefreshButton({\n  onRefresh,\n  isRefreshing = false,\n  className,\n}: RefreshButtonProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  \n  const handleRefresh = async () => {\n    setIsLoading(true);\n    try {\n      await onRefresh();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={handleRefresh}\n      disabled={isLoading || isRefreshing}\n      className={className}\n    >\n      <RefreshCw\n        className={cn(\n          'h-4 w-4',\n          (isLoading || isRefreshing) && 'animate-spin'\n        )}\n      />\n      <span className=\"sr-only\">Refresh data</span>\n    </Button>\n  );\n}\n\n// Table pagination component\ninterface TablePaginationProps<TData> {\n  table: Table<TData>;\n  pageSizeOptions?: number[];\n  showSelectedCount?: boolean;\n  className?: string;\n}\n\nexport function TablePagination<TData>({\n  table,\n  pageSizeOptions = [10, 20, 30, 40, 50],\n  showSelectedCount = true,\n  className,\n}: TablePaginationProps<TData>) {\n  return (\n    <div className={cn('flex items-center justify-between px-2', className)}>\n      {showSelectedCount && (\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{' '}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n      )}\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {pageSizeOptions.map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{' '}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Table toolbar component (combines multiple action components)\ninterface TableToolbarProps<TData> {\n  table: Table<TData>;\n  searchKey?: string;\n  searchPlaceholder?: string;\n  filters?: React.ReactNode;\n  actions?: React.ReactNode;\n  className?: string;\n}\n\nexport function TableToolbar<TData>({\n  table,\n  searchKey,\n  searchPlaceholder,\n  filters,\n  actions,\n  className,\n}: TableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n  \n  return (\n    <div className={cn('flex items-center justify-between', className)}>\n      <div className=\"flex flex-1 items-center space-x-2\">\n        {searchKey && (\n          <Input\n            placeholder={searchPlaceholder || 'Search...'}\n            value={(table.getColumn(searchKey)?.getFilterValue() as string) ?? ''}\n            onChange={(event) =>\n              table.getColumn(searchKey)?.setFilterValue(event.target.value)\n            }\n            className=\"h-8 w-[150px] lg:w-[250px]\"\n          />\n        )}\n        {filters}\n        {isFiltered && (\n          <Button\n            variant=\"ghost\"\n            onClick={() => table.resetColumnFilters()}\n            className=\"h-8 px-2 lg:px-3\"\n          >\n            Reset\n            <X className=\"ml-2 h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      {actions}\n    </div>\n  );\n}\n\n// Export all action components\nexport default {\n  BulkActions,\n  ExportButton,\n  RefreshButton,\n  TablePagination,\n  TableToolbar,\n};"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "grep -c 'export function' src/components/ui/table-actions.tsx",
            "npm run lint src/components/ui/table-actions.tsx"
          ],
          "expectedOutput": "Type checking passes, 5 action components exported, no lint errors"
        },
        "acceptance": {
          "criteria": [
            "BulkActions component for handling selected rows",
            "ExportButton with multiple format support",
            "RefreshButton with loading state",
            "TablePagination with all navigation controls",
            "TableToolbar combining search, filters, and actions",
            "TypeScript generics properly implemented",
            "Accessibility labels included",
            "Responsive design considerations"
          ]
        }
      },
      {
        "id": 165,
        "title": "Create Table Utilities Examples",
        "description": "Create comprehensive examples showing usage patterns",
        "status": "pending",
        "priority": "medium",
        "dependencies": [164],
        "phase": "4",
        "week": "4",
        "files": [
          "src/components/ui/table-utilities-example.tsx"
        ],
        "commands": [
          "npm run type-check",
          "npm run lint"
        ],
        "implementation": {
          "table-utilities-example.tsx": "'use client';\n\nimport * as React from 'react';\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\n// Import all utilities\nimport { createSelectColumn, createSortableColumn, createActionColumn, formatters } from '@/lib/table-utilities';\nimport { SortableHeader, StatusBadge, ContactInfo, ProgressBar } from '@/components/ui/table-columns';\nimport { TableSearch, DateRangePicker, MultiSelect, ColumnVisibilityMenu } from '@/components/ui/table-filters';\nimport { BulkActions, ExportButton, RefreshButton, TablePagination, TableToolbar } from '@/components/ui/table-actions';\n\n// Example data type\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  role: string;\n  department: string;\n  status: 'active' | 'inactive' | 'pending';\n  joinDate: Date;\n  progress: number;\n  salary: number;\n}\n\n// Sample data\nconst data: User[] = [\n  {\n    id: '1',\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    phone: '+1 (555) 123-4567',\n    role: 'Software Engineer',\n    department: 'Engineering',\n    status: 'active',\n    joinDate: new Date('2023-01-15'),\n    progress: 85,\n    salary: 120000,\n  },\n  {\n    id: '2',\n    name: 'Jane Smith',\n    email: 'jane.smith@example.com',\n    phone: '+1 (555) 987-6543',\n    role: 'Product Manager',\n    department: 'Product',\n    status: 'active',\n    joinDate: new Date('2022-08-20'),\n    progress: 92,\n    salary: 140000,\n  },\n  {\n    id: '3',\n    name: 'Bob Johnson',\n    email: 'bob.johnson@example.com',\n    role: 'Designer',\n    department: 'Design',\n    status: 'inactive',\n    joinDate: new Date('2021-05-10'),\n    progress: 45,\n    salary: 90000,\n  },\n  // Add more sample data as needed\n];\n\nexport function TableUtilitiesExample() {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n  \n  // Define columns using utilities\n  const columns: ColumnDef<User>[] = [\n    createSelectColumn<User>(),\n    {\n      accessorKey: 'name',\n      header: 'Employee',\n      cell: ({ row }) => (\n        <ContactInfo\n          name={row.original.name}\n          email={row.original.email}\n          phone={row.original.phone}\n          avatarFallback={row.original.name.split(' ').map(n => n[0]).join('')}\n        />\n      ),\n    },\n    createSortableColumn<User>({\n      accessorKey: 'role',\n      header: 'Role',\n    }),\n    createSortableColumn<User>({\n      accessorKey: 'department',\n      header: 'Department',\n    }),\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => <StatusBadge status={row.original.status} />,\n    },\n    createSortableColumn<User>({\n      accessorKey: 'joinDate',\n      header: 'Join Date',\n      cell: (value) => formatters.date(value),\n    }),\n    createSortableColumn<User>({\n      accessorKey: 'salary',\n      header: 'Salary',\n      cell: (value) => formatters.currency(value),\n    }),\n    {\n      accessorKey: 'progress',\n      header: 'Progress',\n      cell: ({ row }) => (\n        <ProgressBar\n          value={row.original.progress}\n          variant={row.original.progress >= 80 ? 'success' : row.original.progress >= 50 ? 'warning' : 'danger'}\n          showPercentage\n        />\n      ),\n    },\n    createActionColumn<User>({\n      actions: [\n        {\n          label: 'View Details',\n          onClick: (user) => console.log('View:', user),\n        },\n        {\n          label: 'Edit',\n          onClick: (user) => console.log('Edit:', user),\n        },\n        {\n          label: 'Delete',\n          onClick: (user) => console.log('Delete:', user),\n          destructive: true,\n        },\n      ],\n    }),\n  ];\n  \n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n  \n  // Export handlers\n  const handleExport = (format: 'csv' | 'json', data: User[]) => {\n    console.log(`Exporting ${data.length} rows as ${format}`);\n    // Implement actual export logic here\n  };\n  \n  const handleBulkDelete = (users: User[]) => {\n    console.log('Bulk delete:', users);\n    // Implement actual delete logic here\n  };\n  \n  const handleRefresh = async () => {\n    console.log('Refreshing data...');\n    // Implement actual refresh logic here\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  };\n  \n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-bold\">Table Utilities Example</h2>\n      \n      {/* Table Toolbar */}\n      <TableToolbar\n        table={table}\n        searchKey=\"name\"\n        searchPlaceholder=\"Search employees...\"\n        filters={\n          <>\n            <MultiSelect\n              table={table}\n              columnKey=\"department\"\n              title=\"Department\"\n              options={[\n                { label: 'Engineering', value: 'Engineering' },\n                { label: 'Product', value: 'Product' },\n                { label: 'Design', value: 'Design' },\n              ]}\n            />\n            <MultiSelect\n              table={table}\n              columnKey=\"status\"\n              title=\"Status\"\n              options={[\n                { label: 'Active', value: 'active' },\n                { label: 'Inactive', value: 'inactive' },\n                { label: 'Pending', value: 'pending' },\n              ]}\n            />\n          </>\n        }\n        actions={\n          <div className=\"flex items-center gap-2\">\n            <ColumnVisibilityMenu table={table} />\n            <RefreshButton onRefresh={handleRefresh} />\n            <ExportButton\n              table={table}\n              onExport={handleExport}\n              formats={['csv', 'json']}\n            />\n          </div>\n        }\n      />\n      \n      {/* Bulk Actions */}\n      <BulkActions\n        table={table}\n        actions={[\n          {\n            label: 'Delete Selected',\n            onClick: handleBulkDelete,\n            icon: Trash2,\n            variant: 'destructive',\n            requireConfirm: true,\n          },\n        ]}\n      />\n      \n      {/* Table */}\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      \n      {/* Pagination */}\n      <TablePagination table={table} />\n      \n      {/* Usage Documentation */}\n      <div className=\"mt-8 space-y-4 rounded-lg bg-muted p-6\">\n        <h3 className=\"text-lg font-semibold\">Usage Patterns Demonstrated</h3>\n        <ul className=\"list-inside list-disc space-y-2 text-sm\">\n          <li>Column factories: createSelectColumn, createSortableColumn, createActionColumn</li>\n          <li>Formatters: date, currency, percentage formatting</li>\n          <li>Column components: ContactInfo, StatusBadge, ProgressBar</li>\n          <li>Filter components: TableSearch, MultiSelect, ColumnVisibilityMenu</li>\n          <li>Action components: BulkActions, ExportButton, RefreshButton</li>\n          <li>Pagination with customizable page sizes</li>\n          <li>Row selection with bulk operations</li>\n          <li>Sortable columns with visual indicators</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n// Export for use in other components\nexport default TableUtilitiesExample;"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "grep -c 'import.*from.*table-' src/components/ui/table-utilities-example.tsx",
            "npm run lint src/components/ui/table-utilities-example.tsx"
          ],
          "expectedOutput": "Type checking passes, all utilities imported and used, no lint errors"
        },
        "acceptance": {
          "criteria": [
            "Working example demonstrating all utilities",
            "Column factories used correctly",
            "All formatters demonstrated",
            "Filter components integrated",
            "Action components functional",
            "Bulk operations example included",
            "Export functionality demonstrated",
            "Documentation of usage patterns included",
            "Code is well-commented"
          ]
        }
      },
      {
        "id": 166,
        "title": "Update DataTable Exports",
        "description": "Update DataTable component to export utilities from new location",
        "status": "pending",
        "priority": "medium",
        "dependencies": [165],
        "phase": "4",
        "week": "4",
        "files": [
          "src/components/ui/data-table.tsx"
        ],
        "commands": [
          "npm run type-check",
          "npm run lint",
          "npm test -- data-table"
        ],
        "implementation": {
          "data-table.tsx.updates": "'use client';\n\nimport * as React from 'react';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  Table as TanstackTable,\n} from '@tanstack/react-table';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\n// Re-export utilities from new locations\nexport * from '@/lib/table-utilities';\nexport * from '@/components/ui/table-columns';\nexport * from '@/components/ui/table-filters';\nexport * from '@/components/ui/table-actions';\n\n// Deprecation notice for old imports\nif (process.env.NODE_ENV === 'development') {\n  console.warn(\n    'DataTable utility imports from @/components/ui/data-table are deprecated. ' +\n    'Please import from the following locations instead:\\n' +\n    '- Column utilities: @/lib/table-utilities\\n' +\n    '- Column components: @/components/ui/table-columns\\n' +\n    '- Filter components: @/components/ui/table-filters\\n' +\n    '- Action components: @/components/ui/table-actions'\n  );\n}\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  table?: TanstackTable<TData>;\n  className?: string;\n  onRowClick?: (row: TData) => void;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  table: externalTable,\n  className,\n  onRowClick,\n}: DataTableProps<TData, TValue>) {\n  // Use external table if provided, otherwise create internal one\n  const internalTable = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  });\n  \n  const table = externalTable || internalTable;\n  \n  return (\n    <div className={className}>\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && 'selected'}\n                onClick={() => onRowClick?.(row.original)}\n                className={onRowClick ? 'cursor-pointer' : undefined}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(\n                      cell.column.columnDef.cell,\n                      cell.getContext()\n                    )}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell\n                colSpan={columns.length}\n                className=\"h-24 text-center\"\n              >\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\n// Legacy exports for backward compatibility\n// These will be removed in a future version\nexport const tableUtilities = {\n  createSelectColumn: () => {\n    console.warn('Deprecated: Import createSelectColumn from @/lib/table-utilities');\n    return require('@/lib/table-utilities').createSelectColumn;\n  },\n  createSortableColumn: () => {\n    console.warn('Deprecated: Import createSortableColumn from @/lib/table-utilities');\n    return require('@/lib/table-utilities').createSortableColumn;\n  },\n  createActionColumn: () => {\n    console.warn('Deprecated: Import createActionColumn from @/lib/table-utilities');\n    return require('@/lib/table-utilities').createActionColumn;\n  },\n};"
        },
        "validation": {
          "commands": [
            "npm run type-check",
            "grep -c 'export \\*' src/components/ui/data-table.tsx",
            "npm test -- --run data-table"
          ],
          "expectedOutput": "Type checking passes, re-exports configured, tests pass"
        },
        "acceptance": {
          "criteria": [
            "Utilities exported from new locations",
            "Deprecation notices added for development",
            "Backward compatibility maintained",
            "Clear migration instructions in console warnings",
            "DataTable component still functions correctly",
            "Re-exports properly configured",
            "Tests updated and passing",
            "Type safety maintained"
          ]
        }
      }
    ]
  }
}